class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
        map<int,int> mp;
        set<int>zeros;
        int n=rains.size();
        vector<int> result (n,-1);
        for (int i=0;i<rains.size();i++)
        {
             if (rains[i]==0)
            {
                zeros.insert(i);
                result[i]=1;
            }
            if (rains[i]>0)
            {
                if (mp.find(rains[i])!=mp.end())
                {
                    //Search if we can find a zero to dry this lake in set
// upper_bound= returns an iterator pointing to the first element in the range [first, last) that is greater than value, or last if no such element is found.
                    set<int>:: iterator itr= zeros.upper_bound(mp[rains[i]]);
                    if (itr==zeros.end())
                    {
                        return {};
                    }
                    result[*itr]=rains[i];  //setting the value
                    zeros.erase(itr);  //erase
                }
                mp[rains[i]]=i;
            }  
        }
        return result;
    }
};